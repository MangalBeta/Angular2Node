#!/usr/bin/env node

/**
* Module dependencies.
*/

//var app = require('../app');
var app = require('../app');
var debug = require('debug')('Turo:server');
var http = require('http');
var server = http.Server(app);
var io = app.io;
io.listen(server);
let clientListNames = [];
/**
* Get port from environment and store in Express.
*/
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
* Create HTTP server.
*/
//var server = http.createServer(app);
io.on('connection', function(socket){
	clientListNames.push(socket.handshake.query.userName);
	io.emit("updateSocketList", clientListNames);
	io.emit("addUserToSocketList",socket.handshake.query.userName);

	socket.on('disconnect', function(){
		let name=socket.handshake.query.userName;
		let userIndex = clientListNames.indexOf(socket.handshake.query.userName);
		 if (userIndex != -1) {
		 	clientListNames.splice(userIndex, 1);
			io.emit("updateSocketList", clientListNames);
			io.emit("removeUserFromSocketList",name);
		 }
  	});

	socket.on('chatMessageToSocketServer', function(msg, func){
		func("Message recieved!",socket.handshake.query.userName);
		let name = socket.handshake.query.userName;
		let sockectObj = {name,msg}
		io.emit('broadcastToAll_chatMessage', sockectObj);
	});
});

/**
* Listen on provided port, on all network interfaces.
*/
server.listen(port);


server.on('error', onError);
server.on('listening', onListening);


/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
     var port = parseInt(val, 10);

     if (isNaN(port)) {
          // named pipe
          return val;
     }

     if (port >= 0) {
          // port number
          return port;
     }

     return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
     if (error.syscall !== 'listen') {
          throw error;
     }

     var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;

     // handle specific listen errors with friendly messages
     switch (error.code) {
          case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
          case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
          default:
          throw error;
     }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
     var addr = server.address();
     var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
     debug('Listening on ' + bind);
}
